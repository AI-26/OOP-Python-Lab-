{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "af13747e-6ee5-4499-8479-62e4d9f2b35e",
   "metadata": {},
   "source": [
    "\n",
    "# Function to process a list\n",
    "def process_list(numbers):\n",
    "    # Calculate the sum of the list\n",
    "    total = sum(numbers)\n",
    "    \n",
    "    # Calculate the average\n",
    "    average = total / len(numbers) if numbers else 0\n",
    "    \n",
    "    # Print the results\n",
    "    print(\"List:\", numbers)\n",
    "    print(\"Sum:\", total)\n",
    "    print(\"Average:\", average)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Sample list\n",
    "    my_numbers = [10, 20, 30, 40, 50]\n",
    "    \n",
    "    # Passing the list to the function\n",
    "    process_list(my_numbers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e141e96-d703-4828-9caa-781e772e6c20",
   "metadata": {},
   "source": [
    "def list_operations():\n",
    "    # Creating a list\n",
    "    my_list = [10, 20, 30, 40, 50]\n",
    "\n",
    "    # 1. Append - adding an element to the end of the list\n",
    "    my_list.append(60)\n",
    "    print(\"After append(60):\", my_list)\n",
    "\n",
    "    # 2. Insert - adding an element at a specific position\n",
    "    my_list.insert(2, 25)  # Inserting 25 at index 2\n",
    "    print(\"After insert(2, 25):\", my_list)\n",
    "\n",
    "    # 3. Remove - removing a specific element\n",
    "    my_list.remove(30)  # Removes the first occurrence of 30\n",
    "    print(\"After remove(30):\", my_list)\n",
    "\n",
    "    # 4. Pop - removing and returning the last element\n",
    "    popped_element = my_list.pop()  # Pops the last element\n",
    "    print(\"Popped element:\", popped_element)\n",
    "    print(\"After pop():\", my_list)\n",
    "\n",
    "    # 5. Sort - sorting the list in ascending order\n",
    "    my_list.sort()\n",
    "    print(\"After sort():\", my_list)\n",
    "\n",
    "    # 6. Reverse - reversing the list\n",
    "    my_list.reve\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1dc3fcf-8257-493a-b96d-0b132a4eda09",
   "metadata": {},
   "source": [
    "# Function to calculate the cube of each number\n",
    "def calculate_cubes(*args):\n",
    "    # Calculate the cube of each argument\n",
    "    cubes = [x ** 3 for x in args]\n",
    "    \n",
    "    # Print the results\n",
    "    for number, cube in zip(args, cubes):\n",
    "        print(f\"The cube of {number} is {cube}\")\n",
    "\n",
    "# Main part of the program\n",
    "if __name__ == \"__main__\":\n",
    "    # Calling the function with variable length arguments\n",
    "    calculate_cubes(2, 3, 4, 5)  # You can add more numbers here\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "256428ec-3ec7-4047-add4-2aa3d6a6146a",
   "metadata": {},
   "source": [
    "def tower_of_hanoi(n, source, destination, auxiliary):\n",
    "    if n == 1:\n",
    "        print(f\"Move disk 1 from {source} to {destination}\")\n",
    "        return\n",
    "    tower_of_hanoi(n - 1, source, auxiliary, destination)\n",
    "    print(f\"Move disk {n} from {source} to {destination}\")\n",
    "    tower_of_hanoi(n - 1, auxiliary, destination, source)\n",
    "\n",
    "# Example usage\n",
    "num_disks = 3  # You can change this number to solve for more disks\n",
    "tower_of_hanoi(num_disks, 'A', 'C', 'B')  # A, B, and C are the names of the pegs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "222fd196-3808-452b-834b-d3bf796ea06a",
   "metadata": {},
   "source": [
    "def count_case(s):\n",
    "    upper_count = 0\n",
    "    lower_count = 0\n",
    "\n",
    "    for char in s:\n",
    "        if char.isupper():\n",
    "            upper_count += 1\n",
    "        elif char.islower():\n",
    "            lower_count += 1\n",
    "\n",
    "    return upper_count, lower_count\n",
    "\n",
    "# Get input from the user\n",
    "input_string = input(\"Enter a string: \")\n",
    "upper, lower = count_case(input_string)\n",
    "\n",
    "print(f\"Number of uppercase letters: {upper}\")\n",
    "print(f\"Number of lowercase letters: {lower}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b0ffb50-b0e9-4dff-9448-483451014cdf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73886505-e4eb-4e4a-a4ac-f93edb29b7e1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fcc849c-b204-4e14-8bfc-4b4b8fee11b8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be4fafaf-3889-42c5-9b4f-22629b31990c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "861d87a3-299a-4011-989d-fd518b504a29",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
